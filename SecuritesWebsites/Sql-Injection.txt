Case 1:
txtUserId = getRequestString("UserId");
txtSQL = "SELECT * FROM Users WHERE UserId = " + txtUserId;

Hacker Type UserID: 105 OR 1=1
the SQL statement will look like this:
Result: SELECT * FROM Users WHERE UserId = 105 OR 1=1;
The SQL above is valid and will return ALL rows from the "Users" table, since OR 1=1 is always TRUE.

Case 2:
uName = getRequestString("username");
uPass = getRequestString("userpassword");

sql = 'SELECT * FROM Users WHERE Name ="' + uName + '" AND Pass ="' + uPass + '"'
Hacker Type Username:" or ""="
			Password:" or ""="
Result: SELECT * FROM Users WHERE Name ="" or ""="" AND Pass ="" or ""=""
The SQL above is valid and will return all rows from the "Users" table, since OR ""="" is always TRUE.

Case 3:
txtUserId = getRequestString("UserId");
txtSQL = "SELECT * FROM Users WHERE UserId = " + txtUserId;

Hacker Type UserID: 105; DROP TABLE Suppliers
Result: SELECT * FROM Users WHERE UserId = 105; DROP TABLE Suppliers;

Case 4:
<?php
$query="SELECT* FROM users WHERE username= \'$_POST['username']\ AND password= \'$_POST['password']\'";
?>

Hacker type: username = admin--
Result: SELECT* FROM users WHERE username= admin-- AND password = abc
"--" is a comment in DBMS -> FAIL QUERY

To protect a web site from SQL injection, use SQL parameters.
$stmt = $dbh->prepare("INSERT INTO Customers (CustomerName,Address,City) 
VALUES (:nam, :add, :cit)");
$stmt->bindParam(':nam', $txtNam);
$stmt->bindParam(':add', $txtAdd);
$stmt->bindParam(':cit', $txtCit);
$stmt->execute();